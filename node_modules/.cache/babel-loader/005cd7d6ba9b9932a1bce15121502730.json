{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGenerateClassName;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _hash = _interopRequireDefault(require(\"@emotion/hash\"));\n\nvar escapeRegex = /([[\\].#*$><+~=|^:(),\"'`\\s])/g;\n\nfunction safePrefix(classNamePrefix) {\n  var prefix = String(classNamePrefix);\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(prefix.length < 256, \"Material-UI: the class name prefix is too long: \".concat(prefix, \".\")) : void 0; // Sanitize the string as will be used to prefix the generated class name.\n\n  return prefix.replace(escapeRegex, '-');\n}\n\nvar themeHashCache = {}; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nfunction createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,\n      dangerouslyUseGlobalCSS = _options$dangerouslyU === void 0 ? false : _options$dangerouslyU,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === void 0 ? '' : _options$seed;\n  var ruleCounter = 0;\n  return function (rule, styleSheet) {\n    var isStatic = !styleSheet.options.link;\n\n    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name && isStatic) {\n      return \"\".concat(safePrefix(styleSheet.options.name), \"-\").concat(rule.key);\n    }\n\n    var suffix; // It's a static rule.\n\n    if (isStatic) {\n      var themeHash = themeHashCache[styleSheet.options.theme];\n\n      if (!themeHash) {\n        themeHash = (0, _hash.default)(JSON.stringify(styleSheet.options.theme));\n        themeHashCache[styleSheet.theme] = themeHash;\n      }\n\n      var raw = styleSheet.rules.raw[rule.key];\n      suffix = (0, _hash.default)(\"\".concat(themeHash).concat(rule.key).concat(JSON.stringify(raw)));\n    }\n\n    if (!suffix) {\n      ruleCounter += 1;\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join('')) : void 0;\n      suffix = ruleCounter;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return \"\".concat(productionPrefix).concat(seed).concat(suffix);\n    } // Help with debuggability.\n\n\n    if (styleSheet && styleSheet.options.classNamePrefix) {\n      return \"\".concat(safePrefix(styleSheet.options.classNamePrefix), \"-\").concat(rule.key, \"-\").concat(seed).concat(suffix);\n    }\n\n    return \"\".concat(rule.key, \"-\").concat(seed).concat(suffix);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}