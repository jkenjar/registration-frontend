{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = supportedValue;\n\nvar _isInBrowser = require('is-in-browser');\n\nvar _isInBrowser2 = _interopRequireDefault(_isInBrowser);\n\nvar _prefix = require('./prefix');\n\nvar _prefix2 = _interopRequireDefault(_prefix);\n\nvar _supportedProperty = require('./supported-property');\n\nvar _supportedProperty2 = _interopRequireDefault(_supportedProperty);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar cache = {};\nvar transitionProperties = {\n  transition: 1,\n  'transition-property': 1,\n  '-webkit-transition': 1,\n  '-webkit-transition-property': 1\n};\nvar transPropsRegExp = /(^\\s*[\\w-]+)|, (\\s*[\\w-]+)(?![^()]*\\))/g;\nvar el = void 0;\n/**\n * Returns prefixed value transition/transform if needed.\n *\n * @param {String} match\n * @param {String} p1\n * @param {String} p2\n * @return {String}\n * @api private\n */\n\nfunction prefixTransitionCallback(match, p1, p2) {\n  if (p1 === 'all') return 'all';\n  if (p2 === 'all') return ', all';\n  return p1 ? (0, _supportedProperty2['default'])(p1) : ', ' + (0, _supportedProperty2['default'])(p2);\n}\n\nif (_isInBrowser2['default']) el = document.createElement('p');\n/**\n * Returns prefixed value if needed. Returns `false` if value is not supported.\n *\n * @param {String} property\n * @param {String} value\n * @return {String|Boolean}\n * @api public\n */\n\nfunction supportedValue(property, value) {\n  // For server-side rendering.\n  if (!el) return value; // It is a string or a number as a string like '1'.\n  // We want only prefixable values here.\n  // eslint-disable-next-line no-restricted-globals\n\n  if (typeof value !== 'string' || !isNaN(parseInt(value, 10))) {\n    return value;\n  } // Create cache key for current value.\n\n\n  var cacheKey = property + value; // Remove cache for benchmark tests or return value from cache.\n\n  if (process.env.NODE_ENV !== 'benchmark' && cache[cacheKey] != null) {\n    return cache[cacheKey];\n  } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.\n\n\n  try {\n    // Test value as it is.\n    el.style[property] = value;\n  } catch (err) {\n    // Return false if value not supported.\n    cache[cacheKey] = false;\n    return false;\n  } // If 'transition' or 'transition-property' property.\n\n\n  if (transitionProperties[property]) {\n    value = value.replace(transPropsRegExp, prefixTransitionCallback);\n  } else if (el.style[property] === '') {\n    // Value with a vendor prefix.\n    value = _prefix2['default'].css + value; // Hardcode test to convert \"flex\" to \"-ms-flexbox\" for IE10.\n\n    if (value === '-ms-flex') value = '-ms-flexbox'; // Test prefixed value.\n\n    el.style[property] = value; // Return false if value not supported.\n\n    if (el.style[property] === '') {\n      cache[cacheKey] = false;\n      return false;\n    }\n  } // Reset styles for current property.\n\n\n  el.style[property] = ''; // Write current value to cache.\n\n  cache[cacheKey] = value;\n  return cache[cacheKey];\n}","map":null,"metadata":{},"sourceType":"script"}