{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _ThemeContext = _interopRequireDefault(require(\"./ThemeContext\")); // To support composition of theme.\n\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(outerTheme, ['Material-UI: you are providing a theme function property ' + 'to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n')) : void 0;\n    var mergedTheme = localTheme(outerTheme);\n    process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(mergedTheme, 'Material-UI: return an object from your theme function, i.e. theme={() => ({})}!') : void 0;\n    return mergedTheme;\n  }\n\n  return (0, _extends2.default)({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` property.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  return _react.default.createElement(_ThemeContext.default.Consumer, null, function (outerTheme) {\n    var theme = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n    return _react.default.createElement(_ThemeContext.default.Provider, {\n      value: theme\n    }, children);\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * You can wrap a node.\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\n   * A theme object.\n   */\n  theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = (0, _utils.exactProp)(ThemeProvider.propTypes) : void 0;\n}\n\nvar _default = ThemeProvider;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}