{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _ThemeContext = _interopRequireDefault(require(\"./ThemeContext\"));\n\nvar _StylesProvider = require(\"./StylesProvider\");\n\nvar _withStyles = require(\"./withStyles\");\n\nvar _indexCounter = require(\"./indexCounter\");\n\nvar _getStylesCreator = _interopRequireDefault(require(\"./getStylesCreator\")); // We use the same empty object to ref count the styles that don't need a theme object.\n\n\nvar noopTheme = {}; // Helper to debug\n// let id = 0;\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$withTheme = options.withTheme,\n      withTheme = _options$withTheme === void 0 ? false : _options$withTheme,\n      name = options.name,\n      defaultThemeOption = options.defaultTheme,\n      stylesOptions2 = (0, _objectWithoutProperties2.default)(options, [\"withTheme\", \"name\", \"defaultTheme\"]);\n  var stylesCreator = (0, _getStylesCreator.default)(stylesOrCreator);\n  var listenToTheme = stylesCreator.themingEnabled || typeof name === 'string' || withTheme;\n  var defaultTheme = defaultThemeOption || noopTheme;\n  var meta = name || 'Hook';\n  stylesCreator.options = {\n    index: (0, _indexCounter.increment)(),\n    // Use for the global CSS option\n    name: name,\n    // Help with debuggability.\n    meta: meta,\n    classNamePrefix: meta\n  };\n  return function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var theme = listenToTheme ? _react.default.useContext(_ThemeContext.default) || defaultTheme : defaultTheme;\n    var stylesOptions = (0, _extends2.default)({}, _react.default.useContext(_StylesProvider.StylesContext), stylesOptions2);\n    var firstRender = false;\n\n    var _React$useState = _react.default.useState(function () {\n      firstRender = true;\n      return {};\n    }),\n        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n        state = _React$useState2[0]; // Execute synchronously every time the theme changes.\n\n\n    _react.default.useMemo(function () {\n      (0, _withStyles.attach)({\n        name: name,\n        props: props,\n        state: state,\n        stylesCreator: stylesCreator,\n        stylesOptions: stylesOptions,\n        theme: theme\n      });\n    }, [theme]);\n\n    _react.default.useEffect(function () {\n      if (!firstRender) {\n        (0, _withStyles.update)({\n          props: props,\n          state: state,\n          stylesCreator: stylesCreator,\n          stylesOptions: stylesOptions,\n          theme: theme\n        });\n      }\n    }); // Execute asynchronously every time the theme changes.\n\n\n    _react.default.useEffect(function () {\n      return function cleanup() {\n        (0, _withStyles.detach)({\n          state: state,\n          stylesCreator: stylesCreator,\n          stylesOptions: stylesOptions,\n          theme: theme\n        });\n      };\n    }, [theme]);\n\n    return (0, _withStyles.getClasses)({\n      classes: props.classes,\n      Component: undefined,\n      state: state,\n      stylesOptions: stylesOptions\n    });\n  };\n}\n\nvar _default = makeStyles;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}